#! /bin/sh
#
#	$Id: amverify.sh.in,v 1.7.2.6 1999/09/08 23:27:49 jrj Exp $
#
# (C) 1996 by ICEM Systems GmbH
# Author: Axel Zinser (fifi@icem.de)
#
# amverify: check amanda tapes and report errors
#

prefix=@prefix@
exec_prefix=@exec_prefix@
sbindir=@sbindir@
libexecdir=@libexecdir@

PATH=$sbindir:$libexecdir:/usr/bin:/bin:/usr/sbin:/sbin:/usr/ucb
export PATH

USE_VERSION_SUFFIXES="@USE_VERSION_SUFFIXES@"
if [ "$USE_VERSION_SUFFIXES" = "yes" ]; then
	SUF="-@VERSION@"
else
	SUF=
fi

report() {
	echo "$@" >&2
	echo "$@" >> $REPORT
}

getparm() {
	(cd $CONFIG_DIR/$CONFIG; $AMGETCONF $1 2>/dev/null) | grep -v BUGGY
}

# echo a string with no newline appended
# support \r and other special chars
pecho() {
	@PERL@ -e "print \"$@\""
}

sendreport() {
	TAPES=`cat $TAPELIST`
	if [ -f $REPORT -a X"$REPORTTO" != X"" ]; then
		(
		echo "Tapes: $TAPES"
		if [ -s $DEFECTS ]; then
			echo "Errors found: "
			cat $DEFECTS
		else
			echo "No errors found!"
		fi
		echo

		[ -s $REPORT ] \
			&& cat $REPORT
		) | $MAIL -s "$ORG AMANDA VERIFY REPORT FOR $TAPES" $REPORTTO
	fi
}

###
# This function is called to process one dump image.  Standard input is
# the dump image.  We parse the header and decide if it is a GNU tar
# dump or a system dump.  Then we do a catalog operation to /dev/null
# and finally a "cat" to /dev/null to soak up whatever data is still in
# the pipeline.
#
# In the case of a system restore catalogue, this does not fully check
# the integrity of the dump image because system restore programs stop
# as soon as they are done with the directories, which are all at the
# beginning.  But the trailing cat will at least make sure the whole
# image is readable.
###

doonefile() {

	###
	# The goal here is to collect the first 32 KBytes and save the
	# first line.  But the pipe size coming in to us from amrestore
	# is highly system dependent and "dd" does not do reblocking.
	# So we pick a block size that is likely to always be available in
	# the pipe and a count to take it up to 32 KBytes.  Worst case,
	# this could be changed to "bs=1 count=32k".  We also have to
	# soak up the rest of the output after the "head" so an EPIPE
	# does not go back and terminate the "dd" early.
	###

	HEADER=`$DD bs=512 count=64 | ( sed 1q ; cat > /dev/null )`
	CMD=
	result=1
	if [ X"$HEADER" = X"" ]; then
		echo "** No header" > $TEMP/errors
	else
		set X $HEADER
		shift
		shift 9
		if [ X"$1" = X"program" -a X"$2" != X"" ]; then
			if [ X"$TAR" != X"" -a X"$2" = X"$TAR" ]; then
				CMD=$TAR
				ARGS="tf -"
			elif [ X"$TAR" != X"" \
			       -a X"$SAMBA_CLIENT" != X"" \
			       -a X"$2" = X"$SAMBA_CLIENT" ]; then
				CMD=$TAR
				ARGS="tf -"
			elif [ X"$DUMP" != X"" -a X"$2" = X"$DUMP" ]; then
				CMD=$RESTORE
				if [ $IS_AIX -eq 1 ]; then
					ARGS=-tB
				else
					ARGS="tbf 2 -"
				fi
			elif [ X"$VDUMP" != X"" -a X"$2" = X"$VDUMP" ]; then
				CMD=$VRESTORE
				ARGS="tbf 2 -"
			elif [ X"$VXDUMP" != X"" -a X"$2" = X"$VXDUMP" ]; then
				CMD=$VXRESTORE
				ARGS="tbf 2 -"
			elif [ X"$XFSDUMP" != X"" -a X"$2" = X"$XFSDUMP" ]; then
				CMD=$XFSRESTORE
				ARGS="-t -v silent -"
			else
				echo "** Cannot do $2 dumps" > $TEMP/errors
				result=999	# flag as not really an error
			fi
		else
			echo "** Cannot find dump type" > $TEMP/errors
		fi
	fi
	if [ X"$CMD" != X"" ]; then
		$CMD $ARGS > /dev/null 2> $TEMP/errors
		result=$?
	fi
	cat >/dev/null
	echo $result
}

#
# some paths
#
#	CONFIG_DIR	directory in which the config file resides
#	AMRESTORE	full path name of amrestore
#	AMGETCONF	full path name of amgetconf
#	AMTAPE		full path name of amtape
#	TAR		ditto for GNU-tar
#	SAMBA_CLIENT	ditto for smbclient
#	DUMP		ditto for the system dump program
#	RESTORE		ditto for the system restore program
#	VDUMP		ditto for the system dump program
#	VRESTORE	ditto for the system restore program
#	VXDUMP		ditto for the system dump program
#	VXRESTORE	ditto for the system restore program
#	XFSDUMP		ditto for the system dump program
#	XFSRESTORE	ditto for the system restore program
#	DD		ditto for dd
#	MT		ditto for mt
#	MTOPT		flag given to MT to specify tape device: -f or -t
#	MAIL		mail program
#	IS_AIX		true if this is an AIX system

CONFIG_DIR=@CONFIG_DIR@
libexecdir=$libexecdir
sbindir=$sbindir
AMRESTORE=$sbindir/amrestore$SUF
AMGETCONF=$sbindir/amgetconf$SUF
AMTAPE=$sbindir/amtape$SUF
TAR=@GNUTAR@
SAMBA_CLIENT=@SAMBA_CLIENT@
DUMP=@DUMP@
RESTORE=@RESTORE@
VDUMP=@VDUMP@
VRESTORE=@VRESTORE@
VXDUMP=@VXDUMP@
VXRESTORE=@VXRESTORE@
XFSDUMP=@XFSDUMP@
XFSRESTORE=@XFSRESTORE@
DD=@DD@
MT=@MT@
MTOPT=@MT_FILE_FLAG@
MAIL=@MAILER@
if [ `/bin/uname -s 2>/dev/null` = AIX ]; then
	IS_AIX=1
else
	IS_AIX=0
fi

#
# config file
#
SLOT=0
CONFIG=$1
[ X"$CONFIG" = X"" ] \
	&& echo "usage: amverify$SUF <config>" >&2 \
	&& exit 1

AMCONFIG=$CONFIG_DIR/$CONFIG/amanda.conf
[ ! -f $AMCONFIG ] \
	&& echo "Cannot find config file $AMCONFIG" >&2 \
	&& exit 1

cd $CONFIG_DIR/$CONFIG

TPCHANGER=`getparm tpchanger`
if [ X"$TPCHANGER" = X"" ]; then
	echo "No tape changer..."
	DEVICE=`getparm tapedev`
	[ X"$DEVICE" = X"" ] \
		&& echo "No tape device..." >&2 \
		&& exit 1
	[ ! -c $DEVICE ] \
		&& echo "Not a character special device: $DEVICE" >&2 \
		&& exit 1
	echo "Tape device is $DEVICE..."
	SLOTS=1
else
	CHANGER_SLOT=${2:-current}
	echo "Tape changer is $TPCHANGER..."
	SLOTS=`getparm runtapes`
	[ X"$SLOTS" = X"" ] && SLOTS=1
	if [ $SLOTS -eq 1 ]; then
		p=""
	else
		p=s
	fi
	echo "$SLOTS slot${p}..."
	MAXRETRIES=2
fi

#
# check the accessability
#
[ X"$TAR" != X"" -a ! -x "$TAR" ] \
	&& echo "GNU tar not found: $TAR" >&2
[ X"$DUMP" != X"" -a \( X"$RESTORE" = X"" -o ! -x "$RESTORE" \) ] \
	&& echo "System restore program not found: $RESTORE" >&2
[ ! -x $AMRESTORE ] \
	&& echo "amrestore not found: $AMRESTORE" >&2 \
	&& exit 1

REPORTTO=`getparm mailto`
if [ X"$REPORTTO" = X"" ]; then
	echo "No notification by mail!"
else
	echo "Verify summary to $REPORTTO"
fi

ORG=`getparm org`
if [ X"$ORG" = X"" ]; then
	echo "No org in amanda.conf -- using $CONFIG"
	ORG=$CONFIG
fi

#
# ok, let's do it
#
#	TEMP		directory for temporary tar archives and stderr
#	DEFECTS		defect list
#	REPORT		report for mail

TEMP=@AMANDA_TMPDIR@/amverify.$$
trap 'rm -fr $TEMP' 0
if ( umask 077 ; mkdir $TEMP ) ; then
	:
else
	echo "Cannot create $TEMP" >&2
	exit 1
fi
DEFECTS=$TEMP/defects; rm -f $DEFECTS
REPORT=$TEMP/report; rm -f $REPORT
TAPELIST=$TEMP/tapelist; rm -f $TAPELIST
EXITSTAT=$TEMP/amrecover.exit; rm -rf $EXITSTAT

trap 'report "aborted!"; echo "aborted!" >> $DEFECTS; sendreport; rm -fr $TEMP; exit 1' 1 2 3 4 5 6 7 8 10 12 13 14 15

echo "Defects file is $DEFECTS" >&2
report "amverify $CONFIG"
report "`date`"
report ""

# ----------------------------------------------------------------------------

while [ $SLOT -lt $SLOTS ]; do
	SLOT=`expr $SLOT + 1`
	#
	# Tape Changer: dial slot
	#
	if [ X"$TPCHANGER" != X"" ]; then
		report "Loading ${CHANGER_SLOT} slot..."
		$AMTAPE $CONFIG slot $CHANGER_SLOT > $TEMP/amtape.out 2>&1
		THIS_SLOT=$CHANGER_SLOT
		CHANGER_SLOT=next
		RESULT=`grep "changed to slot" $TEMP/amtape.out`
		[ X"$RESULT" = X"" ] \
			&& report "** Error loading slot $THIS_SLOT" \
			&& report "`cat $TEMP/amtape.out`" \
			&& cat $TEMP/amtape.out >> $DEFECTS \
			&& continue
		DEVICE=`$AMTAPE $CONFIG device`
	fi
	report "Using device $DEVICE"
	if [ $IS_AIX -eq 0 ]; then

		# The AIX "mt stat" function does not really do anything
		# w.r.t. checking the drive for ready, and in fact, will
		# fail under some conditions (e.g. if the tape "file"
		# is a symlink to the real device).  We let the rewind
		# right after this take care of the cases "mt stat"
		# does not catch.

		pecho "Waiting for device to go ready...\r" >&2
		until $MT $MTOPT $DEVICE stat >/dev/null 2>&1; do
			sleep 3
		done
	fi
	pecho "Rewinding...                             \r" >&2
	until $MT $MTOPT $DEVICE rewind; do
		sleep 3
	done
	pecho "Processing label...\r" >&2
	$DD if=$DEVICE count=1 bs=32k 2> $TEMP/errors > $TEMP/header
	[ ! -s $TEMP/header ] \
		&& report "** Error reading label on tape" \
		&& cat $TEMP/errors >> $DEFECTS \
		&& continue
	TAPENDATE=`grep AMANDA: $TEMP/header | sed 's/^AMANDA: TAPESTART //'`
	[ X"$TAPENDATE" = X"" ] \
		&& report "** No amanda tape in slot" \
		&& continue
	set X $TAPENDATE
	shift
	VOLUME=$4
	DWRITTEN=$2
	report "Volume $VOLUME, Date $DWRITTEN"
	[ X"$DWRITTEN" = X"0" -o X"$DWRITTEN" = X"X" ] \
		&& report "Fresh tape. Skipping..." \
		&& continue
	echo "$VOLUME" >> $TAPELIST
	pecho "Rewinding...\r" >&2
	until $MT $MTOPT $DEVICE rewind; do
		sleep 3
	done
	ERG=0
	ERRORS=0
	while [ $ERG = 0 ]; do
		pecho "Reading...           \r" >&2
		RESULT=`$AMRESTORE -h -p $DEVICE 2> $TEMP/amrestore.out \
			| doonefile 2> $TEMP/onefile.errors`
		FILE=`grep restoring $TEMP/amrestore.out | sed 's/^.*restoring //'`
		EOF=`grep "reached end of tape" $TEMP/amrestore.out`
		# amrestore:   0: restoring sundae._mnt_sol1_usr.19961127.1
		if [ X"$FILE" != X"" -a X"$RESULT" = X"0" ]; then
			report "Checked $FILE"
		elif [ X"$FILE" != X"" -a X"$RESULT" = X"999" ]; then
			report "Skipped $FILE (`cat $TEMP/errors`)"
		elif [ -n "$EOF" ]; then
			report "End-of-Tape detected."
			break
		else
			report "** Error detected ($FILE)"
			echo "$VOLUME ($FILE):" >>$DEFECTS
			[ -s $TEMP/amrestore.out ] \
				&& report "`cat $TEMP/amrestore.out`" \
				&& cat $TEMP/amrestore.out >>$DEFECTS
			[ -s $TEMP/errors ] \
				&& report "`cat $TEMP/errors`" \
				&& cat $TEMP/errors >>$DEFECTS
			[ -s $TEMP/onefile.errors ] \
				&& report "`cat $TEMP/onefile.errors`" \
				&& cat $TEMP/onefile.errors >>$DEFECTS
			ERRORS=`expr $ERRORS + 1`
			[ $ERRORS -gt 5 ] \
				&& report "Too many errors." \
				&& break
		fi
	done
	pecho "Rewinding...\r" >&2
	until $MT $MTOPT $DEVICE rewind; do
		sleep 3
	done
	echo
	rm -f $TEMP/header \
	      $TEMP/amtape.out \
	      $TEMP/amrestore.out \
	      $TEMP/errors \
	      $TEMP/onefile.errors
done

if [ X"$TPCHANGER" != X"" ]; then
	report "Advancing past the last tape..."
	$AMTAPE $CONFIG slot advance 2> $TEMP/amtape.out
	RESULT=`grep "changed to slot" $TEMP/amtape.out`
	[ X"$RESULT" = X"" ] \
		&& report "** Error advancing after last slot" \
		&& report "`cat $TEMP/amtape.out`" \
		&& cat $TEMP/amtape.out >> $DEFECTS
fi

echo >> $TAPELIST

[ -s $DEFECTS ] \
	&& echo "Errors found: " \
	&& cat $DEFECTS

sendreport

exit 0
