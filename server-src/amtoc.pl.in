#!@PERL@ -w

# create a TOC (Table Of Content) file for an amanda dump

# Author: Nicolas.Mayencourt@cui.unige.ch

#--------------------------------------------------------
sub pr($$$$$$) { 
# you can update these proc if you want another formating
# format: filenumber  host:part  level  size
  print $OF "$_[0]  $_[1]:$_[2]  $_[3]  $_[4]  $_[5]\n";
}
#--------------------------------------------------------



#--------------------------------------------------------
sub tfn($) {
  # calculate tocfilename
  $_ = $_[0];
  eval $subs;
  return $dir . $_ ;
}
#--------------------------------------------------------


#--------------------------------------------------------
sub usage($) {
  print STDERR "@_\n\n";
  print STDERR "usage: amtoc [-a] [-f file] [-s subs] [--] logfile\n";
  print STDERR "         -a      : file output to `label`.toc\n";
  print STDERR "         -f file : file output to file\n";
  print STDERR "         -s subs : file output evaluated to `eval \$subs`\n";
  print STDERR "         --      : last option\n";
  print STDERR "         logfile : input file ('-' for stdin)\n";
  exit;
}
#--------------------------------------------------------

#--------------------------------------------------------
sub init() {
  &usage("amtoc required at least 'logfile' parameter.") if ($#ARGV==-1) ;

  for ($i=0;$i<=$#ARGV;$i++) {
    if ($ARGV[$i] eq '-a') {
        $subs="s/\$/.toc/";
      }
    elsif ($ARGV[$i] eq '-f') {
        $i++;
        &usage("'-f' option require 'file' parameter.")  if ($i > $#ARGV);
        $tocfilename=$ARGV[$i];
      }
    elsif ($ARGV[$i] eq '-s') {
        $i++;
        &usage("'-s' option require 'subs' parameter.")  if ($i > $#ARGV);
        $subs=$ARGV[$i];
      }
    elsif ($ARGV[$i] eq '--') {
      # no more options: next arg == logfile
        $i++;
        &usage("amtoc required at least 'logfile' parameter.") if ($i > $#ARGV);
        $logfile=$ARGV[$i];
        &usage("too many parameters.") unless ($i == $#ARGV);
      }
    else {
        $logfile=$ARGV[$i];
        &usage("too many parameters.") unless ($i == $#ARGV);
      }
  }
  &usage("amtoc required at least 'logfile' parameter.") unless ($logfile);
}

#--------------------------------------------------------

&init;

$dir=$logfile;
$dir =~ s/[^\/]*$//;


if ($logfile eq '-') {$IF=STDIN} else 
  {die ("Cannot open logfile $logfile") unless open (IF,"$logfile");$IF=IF;}

$filenumber=0;

while ( <$IF> ) {
  if ( /^FAIL dumper (\S+) (\S+)/ ) {
    $fail{$1}{$2} = 1;
    next;
  }
  $line = $_;
  if ( ! /^([A-Z]+) taper (\S+) (\S+) (\S+) (\S+)/) { next;}
  # $_ = $1;
  $host = $2;
  $part = $3;
  $date = $4;
  $level = $5;
  switch: {
    /START taper/ && do {
      $tocfilename=&tfn($level) if ($subs);
      if (!$tocfilename || ($tocfilename eq '-')) {$OF=STDOUT;}
      else {
          die ("Cannot open tocfile $tocfilename") unless open(OF,">$tocfilename");
          $OF=OF;
        }
      $filenumber=0;
      &pr("#","Server","/partition","date", "level","size[Kb]");
      &pr("$filenumber","$level","","$part","-","-");
      last switch; };
    /SUCCESS taper/ && do {
      $line =~ / kb (\d+) /;
      if ( $fail{$host}{$part} ) {
        &pr("$filenumber","${host}","${part}","${date}","${level}","FAIL");
      } else {
        &pr("$filenumber","${host}","${part}","${date}","${level}","$1");
      }
      last switch;};
    /INFO taper retrying/ && do {
      --$filenumber;
      last switch; };
    /INFO taper tape/ && do {
      $line =~ / kb (\d+) /;
      $size = $1;
      $line =~ / fm (\d+) /;
      &pr("$1","total","","-","-","$size");
      last switch; };
    /FAIL taper/ && do { next; };
  }
  $filenumber += 1;
}
close $IF;
close OF;
