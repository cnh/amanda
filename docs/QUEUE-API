QUEUE(3)                  NetBSD Programmer's Manual                  QUEUE(3)

NAME
     LIST_ENTRY, LIST_HEAD, LIST_HEAD_INITIALIZER, LIST_INIT,
     LIST_INSERT_AFTER, LIST_INSERT_BEFORE, LIST_INSERT_HEAD, LIST_REMOVE,
     LIST_FIRST, LIST_NEXT, SIMPLEQ_ENTRY, SIMPLEQ_HEAD,
     SIMPLEQ_HEAD_INITIALIZER, SIMPLEQ_INIT, SIMPLEQ_INSERT_HEAD,
     SIMPLEQ_INSERT_TAIL, SIMPLEQ_INSERT_AFTER, SIMPLEQ_REMOVE_HEAD,
     SIMPLEQ_FIRST, SIMPLEQ_NEXT, TAILQ_ENTRY, TAILQ_HEAD,
     TAILQ_HEAD_INITIALIZER, TAILQ_INIT, TAILQ_INSERT_AFTER,
     TAILQ_INSERT_BEFORE, TAILQ_INSERT_HEAD, TAILQ_INSERT_TAIL, TAILQ_REMOVE,
     TAILQ_FIRST, TAILQ_NEXT, CIRCLEQ_ENTRY, CIRCLEQ_HEAD,
     CIRCLEQ_HEAD_INITIALIZER, CIRCLEQ_INIT, CIRCLEQ_INSERT_AFTER,
     CIRCLEQ_INSERT_BEFORE, CIRCLEQ_INSERT_HEAD, CIRCLEQ_INSERT_TAIL,
     CIRCLEQ_REMOVE, CIRCLEQ_FIRST, CIRCLEQ_LAST, CIRCLEQ_NEXT, CIRCLEQ_PREV -
     implementations of lists, simple queues, tail queues, and circular

SYNOPSIS
     #include "queue.h"


     LIST_ENTRY(TYPE);

     LIST_HEAD(HEADNAME, TYPE);

     LIST_HEAD_INITIALIZER(head);

     LIST_INIT(LIST_HEAD *head);

     LIST_INSERT_AFTER(TYPE *listelm, TYPE *elm, LIST_ENTRY NAME);

     LIST_INSERT_BEFORE(TYPE *listelm, TYPE *elm, LIST_ENTRY NAME);

     LIST_INSERT_HEAD(LIST_HEAD *head, TYPE *elm, LIST_ENTRY NAME);

     LIST_REMOVE(TYPE *elm, LIST_ENTRY NAME);

     TYPE *
     LIST_FIRST(LIST_HEAD *head);

     TYPE *
     LIST_NEXT(TYPE *elm, LIST_ENTRY NAME);


     SIMPLEQ_ENTRY(TYPE);

     SIMPLEQ_HEAD(HEADNAME, TYPE);

     SIMPLEQ_HEAD_INITIALIZER(head);

     SIMPLEQ_INIT(SIMPLEQ_HEAD *head);

     SIMPLEQ_INSERT_AFTER(SIMPLEQ_HEAD *head, TYPE *listelm, TYPE *elm,
             SIMPLEQ_ENTRY NAME);

     SIMPLEQ_INSERT_HEAD(SIMPLEQ_HEAD *head, TYPE *elm, SIMPLEQ_ENTRY NAME);

     SIMPLEQ_INSERT_TAIL(SIMPLEQ_HEAD *head, TYPE *elm, SIMPLEQ_ENTRY NAME);

     SIMPLEQ_REMOVE_HEAD(SIMPLEQ_HEAD *head, TYPE *elm, SIMPLEQ_ENTRY NAME);

     TYPE *
     SIMPLEQ_FIRST(SIMPLEQ_HEAD *head);


     TYPE *
     SIMPLEQ_NEXT(TYPE *elm, SIMPLEQ_ENTRY NAME);


     TAILQ_ENTRY(TYPE);

     TAILQ_HEAD(HEADNAME, TYPE);

     TAILQ_HEAD_INITIALIZER(head);

     TAILQ_INIT(TAILQ_HEAD *head);

     TAILQ_INSERT_AFTER(TAILQ_HEAD *head, TYPE *listelm, TYPE *elm,
             TAILQ_ENTRY NAME);

     TAILQ_INSERT_BEFORE(TYPE *listelm, TYPE *elm, TAILQ_ENTRY NAME);

     TAILQ_INSERT_HEAD(TAILQ_HEAD *head, TYPE *elm, TAILQ_ENTRY NAME);

     TAILQ_INSERT_TAIL(TAILQ_HEAD *head, TYPE *elm, TAILQ_ENTRY NAME);

     TAILQ_REMOVE(TAILQ_HEAD *head, TYPE *elm, TAILQ_ENTRY NAME);

     TYPE *
     TAILQ_FIRST(TAILQ_HEAD *head);

     TYPE *
     TAILQ_NEXT(TYPE *elm, TAILQ_ENTRY NAME);


     CIRCLEQ_ENTRY(TYPE);

     CIRCLEQ_HEAD(HEADNAME, TYPE);

     CIRCLEQ_HEAD_INITIALIZER(head);

     CIRCLEQ_INIT(CIRCLEQ_HEAD *head);

     CIRCLEQ_INSERT_AFTER(CIRCLEQ_HEAD *head, TYPE *listelm, TYPE *elm,
             CIRCLEQ_ENTRY NAME);

     CIRCLEQ_INSERT_BEFORE(CIRCLEQ_HEAD *head, TYPE *listelm, TYPE *elm,
             CIRCLEQ_ENTRY NAME);

     CIRCLEQ_INSERT_HEAD(CIRCLEQ_HEAD *head, TYPE *elm, CIRCLEQ_ENTRY NAME);

     CIRCLEQ_INSERT_TAIL(CIRCLEQ_HEAD *head, TYPE *elm, CIRCLEQ_ENTRY NAME);

     CIRCLEQ_REMOVE(CIRCLEQ_HEAD *head, TYPE *elm, CIRCLEQ_ENTRY NAME);

     TYPE *
     CIRCLEQ_FIRST(CIRCLEQ_HEAD *head);

     TYPE *
     CIRCLEQ_LAST(CIRCLEQ_HEAD *head);

     TYPE *
     CIRCLEQ_NEXT(TYPE *elm, CIRCLEQ_ENTRY NAME);

     TYPE *
     CIRCLEQ_PREV(TYPE *elm, CIRCLEQ_ENTRY NAME);

DESCRIPTION
     These macros define and operate on four types of data structures: lists,
     simple queues, tail queues, and circular queues.  All four structures

     support the following functionality:
           1.   Insertion of a new entry at the head of the list.
           2.   Insertion of a new entry before or after any element in the
                list.
           3.   Removal of any entry in the list.
           4.   Forward traversal through the list.

     Lists are the simplest of the four data structures and support only the
     above functionality.

     Simple queues add the following functionality:
           1.   Entries can be added at the end of a list.
     However:
           1.   Entries may not be added before any element in the list.
           2.   Only the first entry in the list may be removed.
           3.   All list insertions and removals must specify the head of the
                list.
           4.   Each head entry requires two pointers rather than one.

     Tail queues add the following functionality:
           1.   Entries can be added at the end of a list.
     However:
           1.   All list insertions and removals, except insertion before an-
                other element, must specify the head of the list.
           2.   Each head entry requires two pointers rather than one.
           3.   Code size is about 15% greater and operations run about 20%
                slower than lists.

     Circular queues add the following functionality:
           1.   Entries can be added at the end of a list.
           2.   They may be traversed backwards, from tail to head.
     However:
           1.   All list insertions and removals must specify the head of the
                list.
           2.   Each head entry requires two pointers rather than one.
           3.   The termination condition for traversal is more complex.
           4.   Code size is about 40% greater and operations run about 45%
                slower than lists.

     In the macro definitions, TYPE is the name of a user defined structure,
     that must contain a field of type LIST_ENTRY, SIMPLEQ_ENTRY, TAILQ_ENTRY,
     or CIRCLEQ_ENTRY, named NAME.  The argument HEADNAME is the name of a us-
     er defined structure that must be declared using the macros LIST_HEAD,
     SIMPLEQ_HEAD, TAILQ_HEAD, or CIRCLEQ_HEAD.  See the examples below for
     further explanation of how these macros are used.

LISTS
     A list is headed by a structure defined by the LIST_HEAD macro.  This
     structure contains a single pointer to the first element on the list.
     The elements are doubly linked so that an arbitrary element can be re-
     moved without traversing the list.  New elements can be added to the list
     after an existing element, before an existing element, or at the head of
     the list.  A LIST_HEAD structure is declared as follows:

           LIST_HEAD(HEADNAME, TYPE) head;

     where HEADNAME is the name of the structure to be defined, and TYPE is
     the type of the elements to be linked into the list.  A pointer to the
     head of the list can later be declared as:

           struct HEADNAME *headp;

     (The names head and headp are user selectable.)

     The macro LIST_ENTRY declares a structure that connects the elements in
     the list.

     The macro LIST_HEAD_INITIALIZER provides a value which can be used to
     initialize a list head at compile time, and is used at the point that the
     list head variable is declared, like:

           struct HEADNAME head = LIST_HEAD_INITIALIZER(head);

     The macro LIST_INIT initializes the list referenced by head.

     The macro LIST_INSERT_HEAD inserts the new element elm at the head of the
     list.

     The macro LIST_INSERT_AFTER inserts the new element elm after the element
     listelm.

     The macro LIST_INSERT_BEFORE inserts the new element elm before the ele-
     ment listelm.

     The macro LIST_REMOVE removes the element elm from the list.

     The macro LIST_FIRST returns the first elemement of the list head.

     The macro LIST_NEXT returns the element after the element elm.

LIST EXAMPLE
     LIST_HEAD(listhead, entry) head;
     struct listhead *headp;         /* List head. */
     struct entry {
             ...
             LIST_ENTRY(entry) entries;      /* List. */
             ...
     } *n1, *n2, *np;

     LIST_INIT(&head);                       /* Initialize the list. */

     n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
     LIST_INSERT_HEAD(&head, n1, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert after. */
     LIST_INSERT_AFTER(n1, n2, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert before. */
     LIST_INSERT_BEFORE(n1, n2, entries);
                                             /* Forward traversal. */
     for (np = LIST_FIRST(&head); np != NULL; np = LIST_NEXT(np, entries))
             np-> ...
                                             /* Delete. */
     while (LIST_FIRST(&head) != NULL)
             LIST_REMOVE(LIST_FIRST(&head), entries);

SIMPLE QUEUES
     A simple queue is headed by a structure defined by the SIMPLEQ_HEAD
     macro.  This structure contains a pair of pointers, one to the first ele-
     ment in the simple queue and the other to the last element in the simple
     queue.  The elements are doubly linked so that an arbitrary element can
     be removed without traversing the simple queue.  New elements can be
     added to the queue after an existing element, before an existing element,
     at the head of the queue, or at the end the queue.  A SIMPLEQ_HEAD struc-
     ture is declared as follows:

           SIMPLEQ_HEAD(HEADNAME, TYPE) head;

     where HEADNAME is the name of the structure to be defined, and TYPE is
     the type of the elements to be linked into the simple queue.  A pointer
     to the head of the simple queue can later be declared as:

           struct HEADNAME *headp;

     (The names head and headp are user selectable.)

     The macro SIMPLEQ_ENTRY declares a structure that connects the elements
     in the simple queue.

     The macro SIMPLEQ_HEAD_INITIALIZER provides a value which can be used to
     initialize a simple queue head at compile time, and is used at the point
     that the simple queue head variable is declared, like:

           struct HEADNAME head = SIMPLEQ_HEAD_INITIALIZER(head);

     The macro SIMPLEQ_INIT initializes the simple queue referenced by head.

     The macro SIMPLEQ_INSERT_HEAD inserts the new element elm at the head of
     the simple queue.

     The macro SIMPLEQ_INSERT_TAIL inserts the new element elm at the end of
     the simple queue.

     The macro SIMPLEQ_INSERT_AFTER inserts the new element elm after the ele-
     ment listelm.

     The macro SIMPLEQ_REMOVE_HEAD removes the first element from the simple
     queue.

     The macro SIMPLEQ_FIRST returns the first elemement of the simple queue
     head.

     The macro SIMPLEQ_NEXT returns the element after the element elm.

SIMPLE QUEUE EXAMPLE
     SIMPLEQ_HEAD(simplehead, entry) head;
     struct simplehead *headp;               /* Simple queue head. */
     struct entry {
             ...
             SIMPLEQ_ENTRY(entry) entries;   /* Simple queue. */
             ...
     } *n1, *n2, *np;

     SIMPLEQ_INIT(&head);                    /* Initialize the queue. */

     n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
     SIMPLEQ_INSERT_HEAD(&head, n1, entries);

     n1 = malloc(sizeof(struct entry));      /* Insert at the tail. */
     SIMPLEQ_INSERT_TAIL(&head, n1, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert after. */
     SIMPLEQ_INSERT_AFTER(&head, n1, n2, entries);
                                             /* Forward traversal. */
     for (np = SIMPLEQ_FIRST(&head); np != NULL; np = SIMPLEQ_NEXT(np, entries))
             np-> ...
                                             /* Delete. */
     while (SIMPLEQ_FIRST(&head) != NULL)
             SIMPLEQ_REMOVE_HEAD(&head, SIMPLEQ_FIRST(&head), entries);

TAIL QUEUES
     A tail queue is headed by a structure defined by the TAILQ_HEAD macro.
     This structure contains a pair of pointers, one to the first element in
     the tail queue and the other to the last element in the tail queue.  The
     elements are doubly linked so that an arbitrary element can be removed
     without traversing the tail queue.  New elements can be added to the
     queue after an existing element, before an existing element, at the head
     of the queue, or at the end the queue.  A TAILQ_HEAD structure is de-
     clared as follows:

           TAILQ_HEAD(HEADNAME, TYPE) head;

     where HEADNAME is the name of the structure to be defined, and TYPE is
     the type of the elements to be linked into the tail queue.  A pointer to
     the head of the tail queue can later be declared as:

           struct HEADNAME *headp;

     (The names head and headp are user selectable.)

     The macro TAILQ_ENTRY declares a structure that connects the elements in
     the tail queue.

     The macro TAILQ_HEAD_INITIALIZER provides a value which can be used to
     initialize a tail queue head at compile time, and is used at the point
     that the tail queue head variable is declared, like:

           struct HEADNAME head = TAILQ_HEAD_INITIALIZER(head);

     The macro TAILQ_INIT initializes the tail queue referenced by head.

     The macro TAILQ_INSERT_HEAD inserts the new element elm at the head of
     the tail queue.

     The macro TAILQ_INSERT_TAIL inserts the new element elm at the end of the
     tail queue.

     The macro TAILQ_INSERT_AFTER inserts the new element elm after the ele-
     ment listelm.

     The macro TAILQ_INSERT_BEFORE inserts the new element elm before the ele-
     ment listelm.

     The macro TAILQ_REMOVE removes the element elm from the tail queue.

     The macro TAILQ_FIRST returns the first elemement of the tail queue head.

     The macro TAILQ_NEXT returns the element after the element elm.

TAIL QUEUE EXAMPLE
     TAILQ_HEAD(tailhead, entry) head;
     struct tailhead *headp;         /* Tail queue head. */
     struct entry {
             ...
             TAILQ_ENTRY(entry) entries;     /* Tail queue. */
             ...
     } *n1, *n2, *np;

     TAILQ_INIT(&head);                      /* Initialize the queue. */

     n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
     TAILQ_INSERT_HEAD(&head, n1, entries);

     n1 = malloc(sizeof(struct entry));      /* Insert at the tail. */
     TAILQ_INSERT_TAIL(&head, n1, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert after. */
     TAILQ_INSERT_AFTER(&head, n1, n2, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert before. */
     TAILQ_INSERT_BEFORE(n1, n2, entries);
                                             /* Forward traversal. */
     for (np = TAILQ_FIRST(&head); np != NULL; np = TAILQ_NEXT(np, entries))
             np-> ...
                                             /* Delete. */
     while (TAILQ_FIRST(&head) != NULL)
             TAILQ_REMOVE(&head, TAILQ_FIRST(&head), entries);

CIRCULAR QUEUES
     A circular queue is headed by a structure defined by the CIRCLEQ_HEAD
     macro.  This structure contains a pair of pointers, one to the first ele-
     ment in the circular queue and the other to the last element in the cir-
     cular queue.  The elements are doubly linked so that an arbitrary element
     can be removed without traversing the queue.  New elements can be added
     to the queue after an existing element, before an existing element, at
     the head of the queue, or at the end of the queue.  A CIRCLEQ_HEAD struc-
     ture is declared as follows:

           CIRCLEQ_HEAD(HEADNAME, TYPE) head;

     where HEADNAME is the name of the structure to be defined, and TYPE is
     the type of the elements to be linked into the circular queue.  A pointer
     to the head of the circular queue can later be declared as:

           struct HEADNAME *headp;

     (The names head and headp are user selectable.)

     The macro CIRCLEQ_ENTRY declares a structure that connects the elements
     in the circular queue.

     The macro CIRCLEQ_HEAD_INITIALIZER provides a value which can be used to
     initialize a circular queue head at compile time, and is used at the
     point that the circular queue head variable is declared, like:

           struct HEADNAME head = CIRCLEQ_HEAD_INITIALIZER(head);

     The macro CIRCLEQ_INIT initializes the circular queue referenced by head.

     The macro CIRCLEQ_INSERT_HEAD inserts the new element elm at the head of
     the circular queue.

     The macro CIRCLEQ_INSERT_TAIL inserts the new element elm at the end of
     the circular queue.

     The macro CIRCLEQ_INSERT_AFTER inserts the new element elm after the ele-
     ment listelm.

     The macro CIRCLEQ_INSERT_BEFORE inserts the new element elm before the
     element listelm.

     The macro CIRCLEQ_REMOVE removes the element elm from the circular queue.

     The macro CIRCLEQ_FIRST returns the first elemement of the circular queue
     head.

     The macro CIRCLEQ_LAST returns the last element of the circular queue
     head.

     The macro CIRCLEQ_NEXT returns the element after the element elm.

     The macro CIRCLEQ_PREV returns the element before the element elm.

CIRCULAR QUEUE EXAMPLE
     CIRCLEQ_HEAD(circleq, entry) head;
     struct circleq *headp;                  /* Circular queue head. */
     struct entry {
             ...
             CIRCLEQ_ENTRY entries;          /* Circular queue. */
             ...
     } *n1, *n2, *np;

     CIRCLEQ_INIT(&head);                    /* Initialize the circular queue. */

     n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
     CIRCLEQ_INSERT_HEAD(&head, n1, entries);

     n1 = malloc(sizeof(struct entry));      /* Insert at the tail. */
     CIRCLEQ_INSERT_TAIL(&head, n1, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert after. */
     CIRCLEQ_INSERT_AFTER(&head, n1, n2, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert before. */
     CIRCLEQ_INSERT_BEFORE(&head, n1, n2, entries);
                                             /* Forward traversal. */
     for (np = CIRCLEQ_FIRST(&head); np != (void *)&head;
         np = CIRCLEQ_NEXT(np, entries))
             np-> ...
                                             /* Reverse traversal. */
     for (np = CIRCLEQ_LAST(&head); np != (void *)&head;
         np = CIRCLEQ_PREV(np, entries))
             np-> ...
                                             /* Delete. */
     while (CIRCLEQ_HEAD(&head) != (void *)&head)
             CIRCLEQ_REMOVE(&head, CIRCLEQ_HEAD(&head), entries);

HISTORY
     The queue functions first appeared in 4.4BSD.  The SIMPLEQ functions
     first appeared in NetBSD 1.2.

4th Berkeley Distribution        June 30, 1997                               8
